Useless nonterminals

   returnexp


Terminals which are not used

   ELSE
   EQU
   "lexp"


Useless rules

   86 returnexp: ID
   87          | NUM
   88          | STR
   89          | TRUE
   90          | FALSE
   91          | OPENING_PARENTHESIS returnexp CLOSING_PARENTHESIS


State 37 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce
State 44 conflicts: 9 shift/reduce, 1 reduce/reduce
State 48 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 60 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce
State 62 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 112 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 133 conflicts: 16 reduce/reduce
State 134 conflicts: 13 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: proc progm
    2     | struct progm

    3 progm: /* empty */
    4      | proc progm
    5      | struct progm

    6 struct: STRUCT ID OPENING_CURLY_BRACES oneOrMoreDeclarations CLOSING_CURLY_BRACES

    7 proc: return_type ID OPENING_PARENTHESIS zeroOrMoreDeclarations CLOSING_PARENTHESIS OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    8 @1: /* empty */

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES
   10     | PRINTF OPENING_PARENTHESIS STR CLOSING_PARENTHESIS SEMICOL
   11     | RETURN expr SEMICOL
   12     | OPENING_CURLY_BRACES stmt_seq CLOSING_CURLY_BRACES
   13     | type ID SEMICOL
   14     | lexp ASSIGN expr SEMICOL
   15     | ID ASSIGN expr SEMICOL
   16     | ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL
   17     | ID ASSIGN ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL
   18     | if_stmt

   19 if_stmt: IF OPENING_PARENTHESIS boolop CLOSING_PARENTHESIS THEN OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

   20 expr: STR
   21     | NUM
   22     | /* empty */
   23     | TRUE
   24     | FALSE
   25     | expr op ID
   26     | expr op expr
   27     | MINUS expr
   28     | NOT expr
   29     | lexp
   30     | OPENING_PARENTHESIS expr CLOSING_PARENTHESIS

   31 boolop: exprtt bools exprtt

   32 exprtt: STR
   33       | NUM
   34       | /* empty */
   35       | TRUE
   36       | FALSE
   37       | MINUS exprtt
   38       | NOT exprtt
   39       | blexp
   40       | OPENING_PARENTHESIS exprtt CLOSING_PARENTHESIS

   41 exprs: /* empty */
   42      | expr COMMA exprs

   43 return_type: INT
   44            | BOOL
   45            | STRING
   46            | VOID

   47 type: INT
   48     | BOOL
   49     | STRING

   50 zeroOrMoreDeclarations: /* empty */
   51                       | declaration
   52                       | declaration COMMA zeroOrMoreDeclarations

   53 oneOrMoreDeclarations: declaration
   54                      | declaration COMMA oneOrMoreDeclarations

   55 zeroOrMoreStatements: /* empty */
   56                     | if_stmt zeroOrMoreStatements
   57                     | stmt zeroOrMoreStatements

   58 declaration: type ID

   59 op: PLUS
   60   | MINUS
   61   | MULTIPLY
   62   | DIVIDE
   63   | MOD
   64   | AND
   65   | OR
   66   | EQUALS
   67   | GREATER_THAN
   68   | GREATER_THAN_EQUALS
   69   | LESS_THAN
   70   | LESS_THAN_EQUALS
   71   | NOT_EQUALS

   72 bools: MOD
   73      | AND
   74      | OR
   75      | EQUALS
   76      | GREATER_THAN
   77      | GREATER_THAN_EQUALS
   78      | LESS_THAN
   79      | LESS_THAN_EQUALS
   80      | NOT_EQUALS

   81 stmt_seq: /* empty */
   82         | stmt stmt_seq

   83 blexp: ID

   84 lexp: ID
   85     | ID FULLSTOP lexp


Terminals, with rules where they appear

$end (0) 0
error (256)
NUM (258) 21 33
ID (259) 6 7 9 13 15 16 17 25 58 83 84 85
STR (260) 10 20 32
INT (261) 43 47
BOOL (262) 44 48
STRING (263) 45 49
VOID (264) 46
EQUALS (265) 66 75
NOT_EQUALS (266) 71 80
NOT (267) 28 38
LESS_THAN (268) 69 78
LESS_THAN_EQUALS (269) 70 79
GREATER_THAN (270) 67 76
GREATER_THAN_EQUALS (271) 68 77
OPENING_PARENTHESIS (272) 7 9 10 16 17 19 30 40
CLOSING_PARENTHESIS (273) 7 9 10 16 17 19 30 40
OPENING_CURLY_BRACES (274) 6 7 9 12 19
CLOSING_CURLY_BRACES (275) 6 7 9 12 19
PLUS (276) 59
MINUS (277) 27 37 60
MULTIPLY (278) 61
MOD (279) 63 72
DIVIDE (280) 62
IF (281) 19
THEN (282) 19
ELSE (283)
TRUE (284) 23 35
FALSE (285) 24 36
SEMICOL (286) 9 10 11 13 14 15 16 17
STRUCT (287) 6
PRINTF (288) 10
ASSIGN (289) 9 14 15 17
FULLSTOP (290) 85
COMMA (291) 42 52 54
FOR (292) 9
RETURN (293) 11
EQU (294)
AND (295) 64 73
OR (296) 65 74
UMINUS (297)
"lexp" (298)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
prog (45)
    on left: 1 2, on right: 0
progm (46)
    on left: 3 4 5, on right: 1 2 4 5
struct (47)
    on left: 6, on right: 2 5
proc (48)
    on left: 7, on right: 1 4
stmt (49)
    on left: 9 10 11 12 13 14 15 16 17 18, on right: 9 57 82
@1 (50)
    on left: 8, on right: 9
if_stmt (51)
    on left: 19, on right: 18 56
expr (52)
    on left: 20 21 22 23 24 25 26 27 28 29 30, on right: 9 11 14 15
    25 26 27 28 30 42
boolop (53)
    on left: 31, on right: 9 19
exprtt (54)
    on left: 32 33 34 35 36 37 38 39 40, on right: 31 37 38 40
exprs (55)
    on left: 41 42, on right: 16 17 42
return_type (56)
    on left: 43 44 45 46, on right: 7
type (57)
    on left: 47 48 49, on right: 13 58
zeroOrMoreDeclarations (58)
    on left: 50 51 52, on right: 7 52
oneOrMoreDeclarations (59)
    on left: 53 54, on right: 6 54
zeroOrMoreStatements (60)
    on left: 55 56 57, on right: 7 9 19 56 57
declaration (61)
    on left: 58, on right: 51 52 53 54
op (62)
    on left: 59 60 61 62 63 64 65 66 67 68 69 70 71,
    on right: 25 26
bools (63)
    on left: 72 73 74 75 76 77 78 79 80, on right: 31
stmt_seq (64)
    on left: 81 82, on right: 12 82
blexp (65)
    on left: 83, on right: 39
lexp (66)
    on left: 84 85, on right: 14 29 85


state 0

    0 $accept: . prog $end

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    STRING  shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5

    prog         go to state 6
    struct       go to state 7
    proc         go to state 8
    return_type  go to state 9


state 1

   43 return_type: INT .

    $default  reduce using rule 43 (return_type)


state 2

   44 return_type: BOOL .

    $default  reduce using rule 44 (return_type)


state 3

   45 return_type: STRING .

    $default  reduce using rule 45 (return_type)


state 4

   46 return_type: VOID .

    $default  reduce using rule 46 (return_type)


state 5

    6 struct: STRUCT . ID OPENING_CURLY_BRACES oneOrMoreDeclarations CLOSING_CURLY_BRACES

    ID  shift, and go to state 10


state 6

    0 $accept: prog . $end

    $end  shift, and go to state 11


state 7

    2 prog: struct . progm

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    STRING  shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5

    $default  reduce using rule 3 (progm)

    progm        go to state 12
    struct       go to state 13
    proc         go to state 14
    return_type  go to state 9


state 8

    1 prog: proc . progm

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    STRING  shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5

    $default  reduce using rule 3 (progm)

    progm        go to state 15
    struct       go to state 13
    proc         go to state 14
    return_type  go to state 9


state 9

    7 proc: return_type . ID OPENING_PARENTHESIS zeroOrMoreDeclarations CLOSING_PARENTHESIS OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    ID  shift, and go to state 16


state 10

    6 struct: STRUCT ID . OPENING_CURLY_BRACES oneOrMoreDeclarations CLOSING_CURLY_BRACES

    OPENING_CURLY_BRACES  shift, and go to state 17


state 11

    0 $accept: prog $end .

    $default  accept


state 12

    2 prog: struct progm .

    $default  reduce using rule 2 (prog)


state 13

    5 progm: struct . progm

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    STRING  shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5

    $default  reduce using rule 3 (progm)

    progm        go to state 18
    struct       go to state 13
    proc         go to state 14
    return_type  go to state 9


state 14

    4 progm: proc . progm

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    STRING  shift, and go to state 3
    VOID    shift, and go to state 4
    STRUCT  shift, and go to state 5

    $default  reduce using rule 3 (progm)

    progm        go to state 19
    struct       go to state 13
    proc         go to state 14
    return_type  go to state 9


state 15

    1 prog: proc progm .

    $default  reduce using rule 1 (prog)


state 16

    7 proc: return_type ID . OPENING_PARENTHESIS zeroOrMoreDeclarations CLOSING_PARENTHESIS OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    OPENING_PARENTHESIS  shift, and go to state 20


state 17

    6 struct: STRUCT ID OPENING_CURLY_BRACES . oneOrMoreDeclarations CLOSING_CURLY_BRACES

    INT     shift, and go to state 21
    BOOL    shift, and go to state 22
    STRING  shift, and go to state 23

    type                   go to state 24
    oneOrMoreDeclarations  go to state 25
    declaration            go to state 26


state 18

    5 progm: struct progm .

    $default  reduce using rule 5 (progm)


state 19

    4 progm: proc progm .

    $default  reduce using rule 4 (progm)


state 20

    7 proc: return_type ID OPENING_PARENTHESIS . zeroOrMoreDeclarations CLOSING_PARENTHESIS OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    INT     shift, and go to state 21
    BOOL    shift, and go to state 22
    STRING  shift, and go to state 23

    $default  reduce using rule 50 (zeroOrMoreDeclarations)

    type                    go to state 24
    zeroOrMoreDeclarations  go to state 27
    declaration             go to state 28


state 21

   47 type: INT .

    $default  reduce using rule 47 (type)


state 22

   48 type: BOOL .

    $default  reduce using rule 48 (type)


state 23

   49 type: STRING .

    $default  reduce using rule 49 (type)


state 24

   58 declaration: type . ID

    ID  shift, and go to state 29


state 25

    6 struct: STRUCT ID OPENING_CURLY_BRACES oneOrMoreDeclarations . CLOSING_CURLY_BRACES

    CLOSING_CURLY_BRACES  shift, and go to state 30


state 26

   53 oneOrMoreDeclarations: declaration .
   54                      | declaration . COMMA oneOrMoreDeclarations

    COMMA  shift, and go to state 31

    $default  reduce using rule 53 (oneOrMoreDeclarations)


state 27

    7 proc: return_type ID OPENING_PARENTHESIS zeroOrMoreDeclarations . CLOSING_PARENTHESIS OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    CLOSING_PARENTHESIS  shift, and go to state 32


state 28

   51 zeroOrMoreDeclarations: declaration .
   52                       | declaration . COMMA zeroOrMoreDeclarations

    COMMA  shift, and go to state 33

    $default  reduce using rule 51 (zeroOrMoreDeclarations)


state 29

   58 declaration: type ID .

    $default  reduce using rule 58 (declaration)


state 30

    6 struct: STRUCT ID OPENING_CURLY_BRACES oneOrMoreDeclarations CLOSING_CURLY_BRACES .

    $default  reduce using rule 6 (struct)


state 31

   54 oneOrMoreDeclarations: declaration COMMA . oneOrMoreDeclarations

    INT     shift, and go to state 21
    BOOL    shift, and go to state 22
    STRING  shift, and go to state 23

    type                   go to state 24
    oneOrMoreDeclarations  go to state 34
    declaration            go to state 26


state 32

    7 proc: return_type ID OPENING_PARENTHESIS zeroOrMoreDeclarations CLOSING_PARENTHESIS . OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    OPENING_CURLY_BRACES  shift, and go to state 35


state 33

   52 zeroOrMoreDeclarations: declaration COMMA . zeroOrMoreDeclarations

    INT     shift, and go to state 21
    BOOL    shift, and go to state 22
    STRING  shift, and go to state 23

    $default  reduce using rule 50 (zeroOrMoreDeclarations)

    type                    go to state 24
    zeroOrMoreDeclarations  go to state 36
    declaration             go to state 28


state 34

   54 oneOrMoreDeclarations: declaration COMMA oneOrMoreDeclarations .

    $default  reduce using rule 54 (oneOrMoreDeclarations)


state 35

    7 proc: return_type ID OPENING_PARENTHESIS zeroOrMoreDeclarations CLOSING_PARENTHESIS OPENING_CURLY_BRACES . zeroOrMoreStatements CLOSING_CURLY_BRACES

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    $default  reduce using rule 55 (zeroOrMoreStatements)

    stmt                  go to state 43
    if_stmt               go to state 44
    type                  go to state 45
    zeroOrMoreStatements  go to state 46
    lexp                  go to state 47


state 36

   52 zeroOrMoreDeclarations: declaration COMMA zeroOrMoreDeclarations .

    $default  reduce using rule 52 (zeroOrMoreDeclarations)


state 37

   15 stmt: ID . ASSIGN expr SEMICOL
   16     | ID . OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL
   17     | ID . ASSIGN ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL
   84 lexp: ID .
   85     | ID . FULLSTOP lexp

    OPENING_PARENTHESIS  shift, and go to state 48
    ASSIGN               shift, and go to state 49
    FULLSTOP             shift, and go to state 50

    ASSIGN  [reduce using rule 84 (lexp)]


state 38

   12 stmt: OPENING_CURLY_BRACES . stmt_seq CLOSING_CURLY_BRACES

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    $default  reduce using rule 81 (stmt_seq)

    stmt      go to state 51
    if_stmt   go to state 52
    type      go to state 45
    stmt_seq  go to state 53
    lexp      go to state 47


state 39

   19 if_stmt: IF . OPENING_PARENTHESIS boolop CLOSING_PARENTHESIS THEN OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    OPENING_PARENTHESIS  shift, and go to state 54


state 40

   10 stmt: PRINTF . OPENING_PARENTHESIS STR CLOSING_PARENTHESIS SEMICOL

    OPENING_PARENTHESIS  shift, and go to state 55


state 41

    9 stmt: FOR . OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    OPENING_PARENTHESIS  shift, and go to state 56


state 42

   11 stmt: RETURN . expr SEMICOL

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 65
    lexp  go to state 66


state 43

   57 zeroOrMoreStatements: stmt . zeroOrMoreStatements

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    $default  reduce using rule 55 (zeroOrMoreStatements)

    stmt                  go to state 43
    if_stmt               go to state 44
    type                  go to state 45
    zeroOrMoreStatements  go to state 67
    lexp                  go to state 47


state 44

   18 stmt: if_stmt .
   56 zeroOrMoreStatements: if_stmt . zeroOrMoreStatements

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    ID                    [reduce using rule 18 (stmt)]
    INT                   [reduce using rule 18 (stmt)]
    BOOL                  [reduce using rule 18 (stmt)]
    STRING                [reduce using rule 18 (stmt)]
    OPENING_CURLY_BRACES  [reduce using rule 18 (stmt)]
    CLOSING_CURLY_BRACES  reduce using rule 18 (stmt)
    CLOSING_CURLY_BRACES  [reduce using rule 55 (zeroOrMoreStatements)]
    IF                    [reduce using rule 18 (stmt)]
    PRINTF                [reduce using rule 18 (stmt)]
    FOR                   [reduce using rule 18 (stmt)]
    RETURN                [reduce using rule 18 (stmt)]
    $default              reduce using rule 18 (stmt)

    stmt                  go to state 43
    if_stmt               go to state 44
    type                  go to state 45
    zeroOrMoreStatements  go to state 68
    lexp                  go to state 47


state 45

   13 stmt: type . ID SEMICOL

    ID  shift, and go to state 69


state 46

    7 proc: return_type ID OPENING_PARENTHESIS zeroOrMoreDeclarations CLOSING_PARENTHESIS OPENING_CURLY_BRACES zeroOrMoreStatements . CLOSING_CURLY_BRACES

    CLOSING_CURLY_BRACES  shift, and go to state 70


state 47

   14 stmt: lexp . ASSIGN expr SEMICOL

    ASSIGN  shift, and go to state 71


state 48

   16 stmt: ID OPENING_PARENTHESIS . exprs CLOSING_PARENTHESIS SEMICOL

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    CLOSING_PARENTHESIS  reduce using rule 41 (exprs)
    MINUS                [reduce using rule 22 (expr)]
    $default             reduce using rule 22 (expr)

    expr   go to state 72
    exprs  go to state 73
    lexp   go to state 66


state 49

   15 stmt: ID ASSIGN . expr SEMICOL
   17     | ID ASSIGN . ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 74
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 75
    lexp  go to state 66


state 50

   85 lexp: ID FULLSTOP . lexp

    ID  shift, and go to state 58

    lexp  go to state 76


state 51

   82 stmt_seq: stmt . stmt_seq

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    $default  reduce using rule 81 (stmt_seq)

    stmt      go to state 51
    if_stmt   go to state 52
    type      go to state 45
    stmt_seq  go to state 77
    lexp      go to state 47


state 52

   18 stmt: if_stmt .

    $default  reduce using rule 18 (stmt)


state 53

   12 stmt: OPENING_CURLY_BRACES stmt_seq . CLOSING_CURLY_BRACES

    CLOSING_CURLY_BRACES  shift, and go to state 78


state 54

   19 if_stmt: IF OPENING_PARENTHESIS . boolop CLOSING_PARENTHESIS THEN OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    NUM                  shift, and go to state 79
    ID                   shift, and go to state 80
    STR                  shift, and go to state 81
    NOT                  shift, and go to state 82
    OPENING_PARENTHESIS  shift, and go to state 83
    MINUS                shift, and go to state 84
    TRUE                 shift, and go to state 85
    FALSE                shift, and go to state 86

    $default  reduce using rule 34 (exprtt)

    boolop  go to state 87
    exprtt  go to state 88
    blexp   go to state 89


state 55

   10 stmt: PRINTF OPENING_PARENTHESIS . STR CLOSING_PARENTHESIS SEMICOL

    STR  shift, and go to state 90


state 56

    9 stmt: FOR OPENING_PARENTHESIS . ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    ID  shift, and go to state 91


state 57

   21 expr: NUM .

    $default  reduce using rule 21 (expr)


state 58

   84 lexp: ID .
   85     | ID . FULLSTOP lexp

    FULLSTOP  shift, and go to state 50

    $default  reduce using rule 84 (lexp)


state 59

   20 expr: STR .

    $default  reduce using rule 20 (expr)


state 60

   28 expr: NOT . expr

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 92
    lexp  go to state 66


state 61

   30 expr: OPENING_PARENTHESIS . expr CLOSING_PARENTHESIS

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 93
    lexp  go to state 66


state 62

   27 expr: MINUS . expr

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 94
    lexp  go to state 66


state 63

   23 expr: TRUE .

    $default  reduce using rule 23 (expr)


state 64

   24 expr: FALSE .

    $default  reduce using rule 24 (expr)


state 65

   11 stmt: RETURN expr . SEMICOL
   25 expr: expr . op ID
   26     | expr . op expr

    EQUALS               shift, and go to state 95
    NOT_EQUALS           shift, and go to state 96
    LESS_THAN            shift, and go to state 97
    LESS_THAN_EQUALS     shift, and go to state 98
    GREATER_THAN         shift, and go to state 99
    GREATER_THAN_EQUALS  shift, and go to state 100
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    MOD                  shift, and go to state 104
    DIVIDE               shift, and go to state 105
    SEMICOL              shift, and go to state 106
    AND                  shift, and go to state 107
    OR                   shift, and go to state 108

    op  go to state 109


state 66

   29 expr: lexp .

    $default  reduce using rule 29 (expr)


state 67

   57 zeroOrMoreStatements: stmt zeroOrMoreStatements .

    $default  reduce using rule 57 (zeroOrMoreStatements)


state 68

   56 zeroOrMoreStatements: if_stmt zeroOrMoreStatements .

    $default  reduce using rule 56 (zeroOrMoreStatements)


state 69

   13 stmt: type ID . SEMICOL

    SEMICOL  shift, and go to state 110


state 70

    7 proc: return_type ID OPENING_PARENTHESIS zeroOrMoreDeclarations CLOSING_PARENTHESIS OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES .

    $default  reduce using rule 7 (proc)


state 71

   14 stmt: lexp ASSIGN . expr SEMICOL

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 111
    lexp  go to state 66


state 72

   25 expr: expr . op ID
   26     | expr . op expr
   42 exprs: expr . COMMA exprs

    EQUALS               shift, and go to state 95
    NOT_EQUALS           shift, and go to state 96
    LESS_THAN            shift, and go to state 97
    LESS_THAN_EQUALS     shift, and go to state 98
    GREATER_THAN         shift, and go to state 99
    GREATER_THAN_EQUALS  shift, and go to state 100
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    MOD                  shift, and go to state 104
    DIVIDE               shift, and go to state 105
    COMMA                shift, and go to state 112
    AND                  shift, and go to state 107
    OR                   shift, and go to state 108

    op  go to state 109


state 73

   16 stmt: ID OPENING_PARENTHESIS exprs . CLOSING_PARENTHESIS SEMICOL

    CLOSING_PARENTHESIS  shift, and go to state 113


state 74

   17 stmt: ID ASSIGN ID . OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL
   84 lexp: ID .
   85     | ID . FULLSTOP lexp

    OPENING_PARENTHESIS  shift, and go to state 114
    FULLSTOP             shift, and go to state 50

    $default  reduce using rule 84 (lexp)


state 75

   15 stmt: ID ASSIGN expr . SEMICOL
   25 expr: expr . op ID
   26     | expr . op expr

    EQUALS               shift, and go to state 95
    NOT_EQUALS           shift, and go to state 96
    LESS_THAN            shift, and go to state 97
    LESS_THAN_EQUALS     shift, and go to state 98
    GREATER_THAN         shift, and go to state 99
    GREATER_THAN_EQUALS  shift, and go to state 100
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    MOD                  shift, and go to state 104
    DIVIDE               shift, and go to state 105
    SEMICOL              shift, and go to state 115
    AND                  shift, and go to state 107
    OR                   shift, and go to state 108

    op  go to state 109


state 76

   85 lexp: ID FULLSTOP lexp .

    $default  reduce using rule 85 (lexp)


state 77

   82 stmt_seq: stmt stmt_seq .

    $default  reduce using rule 82 (stmt_seq)


state 78

   12 stmt: OPENING_CURLY_BRACES stmt_seq CLOSING_CURLY_BRACES .

    $default  reduce using rule 12 (stmt)


state 79

   33 exprtt: NUM .

    $default  reduce using rule 33 (exprtt)


state 80

   83 blexp: ID .

    $default  reduce using rule 83 (blexp)


state 81

   32 exprtt: STR .

    $default  reduce using rule 32 (exprtt)


state 82

   38 exprtt: NOT . exprtt

    NUM                  shift, and go to state 79
    ID                   shift, and go to state 80
    STR                  shift, and go to state 81
    NOT                  shift, and go to state 82
    OPENING_PARENTHESIS  shift, and go to state 83
    MINUS                shift, and go to state 84
    TRUE                 shift, and go to state 85
    FALSE                shift, and go to state 86

    $default  reduce using rule 34 (exprtt)

    exprtt  go to state 116
    blexp   go to state 89


state 83

   40 exprtt: OPENING_PARENTHESIS . exprtt CLOSING_PARENTHESIS

    NUM                  shift, and go to state 79
    ID                   shift, and go to state 80
    STR                  shift, and go to state 81
    NOT                  shift, and go to state 82
    OPENING_PARENTHESIS  shift, and go to state 83
    MINUS                shift, and go to state 84
    TRUE                 shift, and go to state 85
    FALSE                shift, and go to state 86

    $default  reduce using rule 34 (exprtt)

    exprtt  go to state 117
    blexp   go to state 89


state 84

   37 exprtt: MINUS . exprtt

    NUM                  shift, and go to state 79
    ID                   shift, and go to state 80
    STR                  shift, and go to state 81
    NOT                  shift, and go to state 82
    OPENING_PARENTHESIS  shift, and go to state 83
    MINUS                shift, and go to state 84
    TRUE                 shift, and go to state 85
    FALSE                shift, and go to state 86

    $default  reduce using rule 34 (exprtt)

    exprtt  go to state 118
    blexp   go to state 89


state 85

   35 exprtt: TRUE .

    $default  reduce using rule 35 (exprtt)


state 86

   36 exprtt: FALSE .

    $default  reduce using rule 36 (exprtt)


state 87

   19 if_stmt: IF OPENING_PARENTHESIS boolop . CLOSING_PARENTHESIS THEN OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    CLOSING_PARENTHESIS  shift, and go to state 119


state 88

   31 boolop: exprtt . bools exprtt

    EQUALS               shift, and go to state 120
    NOT_EQUALS           shift, and go to state 121
    LESS_THAN            shift, and go to state 122
    LESS_THAN_EQUALS     shift, and go to state 123
    GREATER_THAN         shift, and go to state 124
    GREATER_THAN_EQUALS  shift, and go to state 125
    MOD                  shift, and go to state 126
    AND                  shift, and go to state 127
    OR                   shift, and go to state 128

    bools  go to state 129


state 89

   39 exprtt: blexp .

    $default  reduce using rule 39 (exprtt)


state 90

   10 stmt: PRINTF OPENING_PARENTHESIS STR . CLOSING_PARENTHESIS SEMICOL

    CLOSING_PARENTHESIS  shift, and go to state 130


state 91

    9 stmt: FOR OPENING_PARENTHESIS ID . ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    ASSIGN  shift, and go to state 131


state 92

   25 expr: expr . op ID
   26     | expr . op expr
   28     | NOT expr .

    $default  reduce using rule 28 (expr)

    op  go to state 109


state 93

   25 expr: expr . op ID
   26     | expr . op expr
   30     | OPENING_PARENTHESIS expr . CLOSING_PARENTHESIS

    EQUALS               shift, and go to state 95
    NOT_EQUALS           shift, and go to state 96
    LESS_THAN            shift, and go to state 97
    LESS_THAN_EQUALS     shift, and go to state 98
    GREATER_THAN         shift, and go to state 99
    GREATER_THAN_EQUALS  shift, and go to state 100
    CLOSING_PARENTHESIS  shift, and go to state 132
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    MOD                  shift, and go to state 104
    DIVIDE               shift, and go to state 105
    AND                  shift, and go to state 107
    OR                   shift, and go to state 108

    op  go to state 109


state 94

   25 expr: expr . op ID
   26     | expr . op expr
   27     | MINUS expr .

    $default  reduce using rule 27 (expr)

    op  go to state 109


state 95

   66 op: EQUALS .

    $default  reduce using rule 66 (op)


state 96

   71 op: NOT_EQUALS .

    $default  reduce using rule 71 (op)


state 97

   69 op: LESS_THAN .

    $default  reduce using rule 69 (op)


state 98

   70 op: LESS_THAN_EQUALS .

    $default  reduce using rule 70 (op)


state 99

   67 op: GREATER_THAN .

    $default  reduce using rule 67 (op)


state 100

   68 op: GREATER_THAN_EQUALS .

    $default  reduce using rule 68 (op)


state 101

   59 op: PLUS .

    $default  reduce using rule 59 (op)


state 102

   60 op: MINUS .

    $default  reduce using rule 60 (op)


state 103

   61 op: MULTIPLY .

    $default  reduce using rule 61 (op)


state 104

   63 op: MOD .

    $default  reduce using rule 63 (op)


state 105

   62 op: DIVIDE .

    $default  reduce using rule 62 (op)


state 106

   11 stmt: RETURN expr SEMICOL .

    $default  reduce using rule 11 (stmt)


state 107

   64 op: AND .

    $default  reduce using rule 64 (op)


state 108

   65 op: OR .

    $default  reduce using rule 65 (op)


state 109

   25 expr: expr op . ID
   26     | expr op . expr

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 133
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 134
    lexp  go to state 66


state 110

   13 stmt: type ID SEMICOL .

    $default  reduce using rule 13 (stmt)


state 111

   14 stmt: lexp ASSIGN expr . SEMICOL
   25 expr: expr . op ID
   26     | expr . op expr

    EQUALS               shift, and go to state 95
    NOT_EQUALS           shift, and go to state 96
    LESS_THAN            shift, and go to state 97
    LESS_THAN_EQUALS     shift, and go to state 98
    GREATER_THAN         shift, and go to state 99
    GREATER_THAN_EQUALS  shift, and go to state 100
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    MOD                  shift, and go to state 104
    DIVIDE               shift, and go to state 105
    SEMICOL              shift, and go to state 135
    AND                  shift, and go to state 107
    OR                   shift, and go to state 108

    op  go to state 109


state 112

   42 exprs: expr COMMA . exprs

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    CLOSING_PARENTHESIS  reduce using rule 41 (exprs)
    MINUS                [reduce using rule 22 (expr)]
    $default             reduce using rule 22 (expr)

    expr   go to state 72
    exprs  go to state 136
    lexp   go to state 66


state 113

   16 stmt: ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS . SEMICOL

    SEMICOL  shift, and go to state 137


state 114

   17 stmt: ID ASSIGN ID OPENING_PARENTHESIS . exprs CLOSING_PARENTHESIS SEMICOL

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    CLOSING_PARENTHESIS  reduce using rule 41 (exprs)
    MINUS                [reduce using rule 22 (expr)]
    $default             reduce using rule 22 (expr)

    expr   go to state 72
    exprs  go to state 138
    lexp   go to state 66


state 115

   15 stmt: ID ASSIGN expr SEMICOL .

    $default  reduce using rule 15 (stmt)


state 116

   38 exprtt: NOT exprtt .

    $default  reduce using rule 38 (exprtt)


state 117

   40 exprtt: OPENING_PARENTHESIS exprtt . CLOSING_PARENTHESIS

    CLOSING_PARENTHESIS  shift, and go to state 139


state 118

   37 exprtt: MINUS exprtt .

    $default  reduce using rule 37 (exprtt)


state 119

   19 if_stmt: IF OPENING_PARENTHESIS boolop CLOSING_PARENTHESIS . THEN OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    THEN  shift, and go to state 140


state 120

   75 bools: EQUALS .

    $default  reduce using rule 75 (bools)


state 121

   80 bools: NOT_EQUALS .

    $default  reduce using rule 80 (bools)


state 122

   78 bools: LESS_THAN .

    $default  reduce using rule 78 (bools)


state 123

   79 bools: LESS_THAN_EQUALS .

    $default  reduce using rule 79 (bools)


state 124

   76 bools: GREATER_THAN .

    $default  reduce using rule 76 (bools)


state 125

   77 bools: GREATER_THAN_EQUALS .

    $default  reduce using rule 77 (bools)


state 126

   72 bools: MOD .

    $default  reduce using rule 72 (bools)


state 127

   73 bools: AND .

    $default  reduce using rule 73 (bools)


state 128

   74 bools: OR .

    $default  reduce using rule 74 (bools)


state 129

   31 boolop: exprtt bools . exprtt

    NUM                  shift, and go to state 79
    ID                   shift, and go to state 80
    STR                  shift, and go to state 81
    NOT                  shift, and go to state 82
    OPENING_PARENTHESIS  shift, and go to state 83
    MINUS                shift, and go to state 84
    TRUE                 shift, and go to state 85
    FALSE                shift, and go to state 86

    $default  reduce using rule 34 (exprtt)

    exprtt  go to state 141
    blexp   go to state 89


state 130

   10 stmt: PRINTF OPENING_PARENTHESIS STR CLOSING_PARENTHESIS . SEMICOL

    SEMICOL  shift, and go to state 142


state 131

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN . expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    NUM                  shift, and go to state 57
    ID                   shift, and go to state 58
    STR                  shift, and go to state 59
    NOT                  shift, and go to state 60
    OPENING_PARENTHESIS  shift, and go to state 61
    MINUS                shift, and go to state 62
    TRUE                 shift, and go to state 63
    FALSE                shift, and go to state 64

    MINUS     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)

    expr  go to state 143
    lexp  go to state 66


state 132

   30 expr: OPENING_PARENTHESIS expr CLOSING_PARENTHESIS .

    $default  reduce using rule 30 (expr)


state 133

   25 expr: expr op ID .
   84 lexp: ID .
   85     | ID . FULLSTOP lexp

    FULLSTOP  shift, and go to state 50

    EQUALS               reduce using rule 25 (expr)
    EQUALS               [reduce using rule 84 (lexp)]
    NOT_EQUALS           reduce using rule 25 (expr)
    NOT_EQUALS           [reduce using rule 84 (lexp)]
    LESS_THAN            reduce using rule 25 (expr)
    LESS_THAN            [reduce using rule 84 (lexp)]
    LESS_THAN_EQUALS     reduce using rule 25 (expr)
    LESS_THAN_EQUALS     [reduce using rule 84 (lexp)]
    GREATER_THAN         reduce using rule 25 (expr)
    GREATER_THAN         [reduce using rule 84 (lexp)]
    GREATER_THAN_EQUALS  reduce using rule 25 (expr)
    GREATER_THAN_EQUALS  [reduce using rule 84 (lexp)]
    CLOSING_PARENTHESIS  reduce using rule 25 (expr)
    CLOSING_PARENTHESIS  [reduce using rule 84 (lexp)]
    PLUS                 reduce using rule 25 (expr)
    PLUS                 [reduce using rule 84 (lexp)]
    MINUS                reduce using rule 25 (expr)
    MINUS                [reduce using rule 84 (lexp)]
    MULTIPLY             reduce using rule 25 (expr)
    MULTIPLY             [reduce using rule 84 (lexp)]
    MOD                  reduce using rule 25 (expr)
    MOD                  [reduce using rule 84 (lexp)]
    DIVIDE               reduce using rule 25 (expr)
    DIVIDE               [reduce using rule 84 (lexp)]
    SEMICOL              reduce using rule 25 (expr)
    SEMICOL              [reduce using rule 84 (lexp)]
    COMMA                reduce using rule 25 (expr)
    COMMA                [reduce using rule 84 (lexp)]
    AND                  reduce using rule 25 (expr)
    AND                  [reduce using rule 84 (lexp)]
    OR                   reduce using rule 25 (expr)
    OR                   [reduce using rule 84 (lexp)]
    $default             reduce using rule 25 (expr)


state 134

   25 expr: expr . op ID
   26     | expr . op expr
   26     | expr op expr .

    EQUALS               shift, and go to state 95
    NOT_EQUALS           shift, and go to state 96
    LESS_THAN            shift, and go to state 97
    LESS_THAN_EQUALS     shift, and go to state 98
    GREATER_THAN         shift, and go to state 99
    GREATER_THAN_EQUALS  shift, and go to state 100
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    MOD                  shift, and go to state 104
    DIVIDE               shift, and go to state 105
    AND                  shift, and go to state 107
    OR                   shift, and go to state 108

    EQUALS               [reduce using rule 26 (expr)]
    NOT_EQUALS           [reduce using rule 26 (expr)]
    LESS_THAN            [reduce using rule 26 (expr)]
    LESS_THAN_EQUALS     [reduce using rule 26 (expr)]
    GREATER_THAN         [reduce using rule 26 (expr)]
    GREATER_THAN_EQUALS  [reduce using rule 26 (expr)]
    PLUS                 [reduce using rule 26 (expr)]
    MINUS                [reduce using rule 26 (expr)]
    MULTIPLY             [reduce using rule 26 (expr)]
    MOD                  [reduce using rule 26 (expr)]
    DIVIDE               [reduce using rule 26 (expr)]
    AND                  [reduce using rule 26 (expr)]
    OR                   [reduce using rule 26 (expr)]
    $default             reduce using rule 26 (expr)

    op  go to state 109


state 135

   14 stmt: lexp ASSIGN expr SEMICOL .

    $default  reduce using rule 14 (stmt)


state 136

   42 exprs: expr COMMA exprs .

    $default  reduce using rule 42 (exprs)


state 137

   16 stmt: ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL .

    $default  reduce using rule 16 (stmt)


state 138

   17 stmt: ID ASSIGN ID OPENING_PARENTHESIS exprs . CLOSING_PARENTHESIS SEMICOL

    CLOSING_PARENTHESIS  shift, and go to state 144


state 139

   40 exprtt: OPENING_PARENTHESIS exprtt CLOSING_PARENTHESIS .

    $default  reduce using rule 40 (exprtt)


state 140

   19 if_stmt: IF OPENING_PARENTHESIS boolop CLOSING_PARENTHESIS THEN . OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES

    OPENING_CURLY_BRACES  shift, and go to state 145


state 141

   31 boolop: exprtt bools exprtt .

    $default  reduce using rule 31 (boolop)


state 142

   10 stmt: PRINTF OPENING_PARENTHESIS STR CLOSING_PARENTHESIS SEMICOL .

    $default  reduce using rule 10 (stmt)


state 143

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr . SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES
   25 expr: expr . op ID
   26     | expr . op expr

    EQUALS               shift, and go to state 95
    NOT_EQUALS           shift, and go to state 96
    LESS_THAN            shift, and go to state 97
    LESS_THAN_EQUALS     shift, and go to state 98
    GREATER_THAN         shift, and go to state 99
    GREATER_THAN_EQUALS  shift, and go to state 100
    PLUS                 shift, and go to state 101
    MINUS                shift, and go to state 102
    MULTIPLY             shift, and go to state 103
    MOD                  shift, and go to state 104
    DIVIDE               shift, and go to state 105
    SEMICOL              shift, and go to state 146
    AND                  shift, and go to state 107
    OR                   shift, and go to state 108

    op  go to state 109


state 144

   17 stmt: ID ASSIGN ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS . SEMICOL

    SEMICOL  shift, and go to state 147


state 145

   19 if_stmt: IF OPENING_PARENTHESIS boolop CLOSING_PARENTHESIS THEN OPENING_CURLY_BRACES . zeroOrMoreStatements CLOSING_CURLY_BRACES

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    $default  reduce using rule 55 (zeroOrMoreStatements)

    stmt                  go to state 43
    if_stmt               go to state 44
    type                  go to state 45
    zeroOrMoreStatements  go to state 148
    lexp                  go to state 47


state 146

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL . boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    NUM                  shift, and go to state 79
    ID                   shift, and go to state 80
    STR                  shift, and go to state 81
    NOT                  shift, and go to state 82
    OPENING_PARENTHESIS  shift, and go to state 83
    MINUS                shift, and go to state 84
    TRUE                 shift, and go to state 85
    FALSE                shift, and go to state 86

    $default  reduce using rule 34 (exprtt)

    boolop  go to state 149
    exprtt  go to state 88
    blexp   go to state 89


state 147

   17 stmt: ID ASSIGN ID OPENING_PARENTHESIS exprs CLOSING_PARENTHESIS SEMICOL .

    $default  reduce using rule 17 (stmt)


state 148

   19 if_stmt: IF OPENING_PARENTHESIS boolop CLOSING_PARENTHESIS THEN OPENING_CURLY_BRACES zeroOrMoreStatements . CLOSING_CURLY_BRACES

    CLOSING_CURLY_BRACES  shift, and go to state 150


state 149

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop . SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    SEMICOL  shift, and go to state 151


state 150

   19 if_stmt: IF OPENING_PARENTHESIS boolop CLOSING_PARENTHESIS THEN OPENING_CURLY_BRACES zeroOrMoreStatements CLOSING_CURLY_BRACES .

    $default  reduce using rule 19 (if_stmt)


state 151

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL . stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    stmt     go to state 152
    if_stmt  go to state 52
    type     go to state 45
    lexp     go to state 47


state 152

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt . CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    CLOSING_PARENTHESIS  shift, and go to state 153


state 153

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS . OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    OPENING_CURLY_BRACES  shift, and go to state 154


state 154

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES . @1 zeroOrMoreStatements CLOSING_CURLY_BRACES

    $default  reduce using rule 8 (@1)

    @1  go to state 155


state 155

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 . zeroOrMoreStatements CLOSING_CURLY_BRACES

    ID                    shift, and go to state 37
    INT                   shift, and go to state 21
    BOOL                  shift, and go to state 22
    STRING                shift, and go to state 23
    OPENING_CURLY_BRACES  shift, and go to state 38
    IF                    shift, and go to state 39
    PRINTF                shift, and go to state 40
    FOR                   shift, and go to state 41
    RETURN                shift, and go to state 42

    $default  reduce using rule 55 (zeroOrMoreStatements)

    stmt                  go to state 43
    if_stmt               go to state 44
    type                  go to state 45
    zeroOrMoreStatements  go to state 156
    lexp                  go to state 47


state 156

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements . CLOSING_CURLY_BRACES

    CLOSING_CURLY_BRACES  shift, and go to state 157


state 157

    9 stmt: FOR OPENING_PARENTHESIS ID ASSIGN expr SEMICOL boolop SEMICOL stmt CLOSING_PARENTHESIS OPENING_CURLY_BRACES @1 zeroOrMoreStatements CLOSING_CURLY_BRACES .

    $default  reduce using rule 9 (stmt)
